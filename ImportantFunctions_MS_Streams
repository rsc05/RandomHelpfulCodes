from selenium.common.exceptions import WebDriverException
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import WebDriverWait
from selenium import webdriver
import os
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
import time
from selenium.webdriver.common.action_chains import ActionChains
from selenium import webdriver
from webdriver_manager.chrome import ChromeDriverManager

# This function insert the name of the person you are searching for and add him/her


def Add_name(name1, driver):
    # wait for password field and enter password
    # Find search input
    path1 = "/html/body/div[1]/div/div[2]/video-update/section/form/div[2]/video-edit/section/div[1]/div[2]/video-edit-permissions-pane/div/video-permissions/div/div/principal-group-search/div/div[1]/form/div/input"
    e2 = Check_If_element_exist_by_path(driver, path1)
    if 'WebElement' in str(type(e2)):
        e2.send_keys(name1)

    # Press the search on the observed element
    path1 = "/html/body/div[1]/div/div[2]/video-update/section/form/div[2]/video-edit/section/div[1]/div[2]/video-edit-permissions-pane/div/video-permissions/div/div/principal-group-search/div/div[1]/form/div/button"
    e2 = driver.find_element(By.XPATH, path1)
    WebDriverWait(driver, 10).until(
        EC.element_to_be_clickable(e2)).click()

    # Give some time to process
    time.sleep(1)

    # Add the observed element
    path1 = "/html/body/div[1]/div/div[2]/video-update/section/form/div[2]/video-edit/section/div[1]/div[2]/video-edit-permissions-pane/div/video-permissions/div/div/principal-group-search/div/div[2]/div/ul/li/div/div[2]"
    e2 = driver.find_element(By.XPATH, path1)
    WebDriverWait(driver, 30).until(
        EC.element_to_be_clickable(e2)).click()


# This function takes the xpath of the table where all authors reside and return the list of owners
def get_list_of_owners(path1, driver):
    k = driver.find_element(By.XPATH, path1).find_elements(
        By.XPATH, "//input[@type='checkbox']")
    List_of_owners = []
    for i in k:
        sentence = i.get_attribute('outerHTML')
        sub_string = 'ng-model="flatPermission.isOwner"'
        if sub_string in sentence:
            List_of_owners.append(i)

    return List_of_owners

# Example
# Get the list of owners as a list of elements
# path1="/html/body/div[1]/div/div[2]/video-update/section/form/div[2]/video-edit/section/div[1]/div[2]/video-edit-permissions-pane/div/video-permissions/div/div/div/div[2]"
# List_of_owners=get_list_of_owners(path1)


# This function selects unchecked input of box
def select_checkbox(driver, path1):
    upload_field = driver.find_element(By.XPATH, path1)
    if not upload_field.is_selected():
        actions = ActionChains(driver)
        actions.move_to_element(upload_field).perform()
        driver.execute_script("arguments[0].click();", upload_field)

# Example
# path1="/html/body/div[1]/div/div[2]/video-update/section/form/div[2]/video-edit/section/div[1]/div[2]/video-edit-permissions-pane/div/video-permissions/div/div/div/div[2]/div[2]/div/div[2]/div/label/input"
# select_checkbox(driver,path1)

# This function takes as input the div of the item and do the task
# Input:
# £ name1: list of names of those you want to give them ownership
# £ path2: the path of the driver
# £ driver: The open browser


def Try(driver, path3, names1):
    # press on the button of edit
    path2 = f"{path3}/item/item/video-item/div/list-row/ng-transclude/list-cell[5]/div/div/ng-transclude/div/flex-drawer/div/ul/li[3]/button"

    # Input path of the div and names of the people you wish to add
    el = Check_If_element_exist_by_path(driver, path2)

    # Scroll to where it is located
    ActionChains(driver).move_to_element(el).perform()
    if 'WebElement' in str(type(el)):
        el.click()

    for name in names1:
        # Add the names of new owners
        Add_name(name, driver)
        # Get the list of owners as a list of elements
        path1 = "/html/body/div[1]/div/div[2]/video-update/section/form/div[2]/video-edit/section/div[1]/div[2]/video-edit-permissions-pane/div/video-permissions/div/div/div/div[2]"
        List_of_owners = get_list_of_owners(path1, driver)
        # Check if all in the list of owners are owners of the video
        for i in List_of_owners:
            if not i.is_selected():
                actions = ActionChains(driver)
                actions.move_to_element(i).perform()
                driver.execute_script("arguments[0].click();", i)
        # Check if everyone at the department can veiw the video
        path1 = "/html/body/div[1]/div/div[2]/video-update/section/form/div[2]/video-edit/section/div[1]/div[2]/video-edit-permissions-pane/div/div/label/input"
        select_checkbox(driver, path1)

    # Press the apply button
    path1 = "/html/body/div[1]/div/div[2]/video-update/section/form/div[1]/div/div[2]/button"
    Apply_button = Check_If_element_exist_by_path(driver, path1)
    # time.sleep(1)
    # Apply_button = driver.find_element(By.XPATH, path1)
    # Check if button is enabled
    if Apply_button.is_enabled():
        Apply_button.click()
    else:
        path1 = "/html/body/div[1]/div/div[2]/video-update/section/form/div[1]/div/div[1]/button"
        Cancel_button = driver.find_element(By.XPATH, path1)
        Cancel_button.click()

    time.sleep(1)
    # Go back
    driver.back()
    driver.back()


def Check_If_element_exist_by_path(driver, path2):
    try:
        el = WebDriverWait(driver, 1).until(
            EC.presence_of_element_located((By.XPATH, path2)))
        return el
    except Exception as e:
        print(f"The non-existant path: {path2}")


def Open_MS_Streams(UserEmail, Password):
    # Getting important button elements for startup pages
    EMAILFIELD = (By.ID, "i0116")
    PASSWORDFIELD = (By.ID, "i0118")
    NEXTBUTTON = (By.ID, "idSIButton9")
    Yes = (By.ID, "idSIButton9")

    url1 = 'https://web.microsoftstream.com/studio/videos'
    driver = webdriver.Chrome()
    driver.get(url1)
    # wait for email field and enter email
    WebDriverWait(driver, 10).until(EC.element_to_be_clickable(
        EMAILFIELD)).send_keys(UserEmail)

    # Click Next
    WebDriverWait(driver, 10).until(
        EC.element_to_be_clickable(NEXTBUTTON)).click()

    # wait for password field and enter password
    WebDriverWait(driver, 10).until(
        EC.element_to_be_clickable(PASSWORDFIELD)).send_keys(Password)

    # Click Login - same id?
    WebDriverWait(driver, 10).until(
        EC.element_to_be_clickable(NEXTBUTTON)).click()

    # Click Login - same id?
    WebDriverWait(driver, 30).until(
        EC.element_to_be_clickable(Yes)).click()

    # Make sure you are back on the top of the page
    driver.maximize_window()
    return driver

# Example
# UserEmail="zm21385@bristol.ac.uk"
# Password="Rami1234"
# Open_MS_Streams(UserEmail, Password)




# A simpler way to check for existence of an element is to use .find_elements() and check for an empty list.

def Press_Show_more(driver):
    path1 = "/html/body/div[1]/div/div[2]/studio-page/div/section/div/div/studio-video-results/video-results/div[3]/items-list/div/div[2]/div[2]/button"
    el = driver.find_elements(By.XPATH, path1)
    if len(el) > 0:
        el[0].click()
        driver.find_element(By.TAG_NAME, 'body').send_keys(
            Keys.CONTROL + Keys.HOME)
    else:
        print('The show more element does not exist')

# driver.find_element(By.XPATH,"//button[contains(., 'Show more')]").get_attribute('innerHTML')

# from selenium.common.exceptions import NoSuchElementException


def search_element(driver, path1):
    Press_Show_more(driver)
    while True:
        ActionChains(driver).send_keys(Keys.PAGE_DOWN).perform()
        # time.sleep(2) #2 seconds
        try:
            channel_text = WebDriverWait(driver, 1).until(
                EC.presence_of_element_located((By.XPATH, path1)))
            if 'WebElement' in str(type(channel_text)):
                return channel_text
            break
        except:
            continue
